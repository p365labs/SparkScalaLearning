package com.p365labs.spark.learning.tranformations

import org.apache.spark.SparkContext

/**
  * FlatMap is really similar to .map() the difference is the output generated by the 2 different
  * transformation : map generates 1 output per 1 input, on the contrary flatMap could generate multiple
  * output per 1 input.
  *
  * Created by federicopanini on 06/06/16.
  */
class FlatMap extends Serializable {
  def testFlatMap(sc: SparkContext): Unit = {
    val lines = sc.parallelize(List("hello world, ", "hi"));
    val word = lines.flatMap(line => line.split(" "));

    println(word.first());
  }

  /**
    * this example show the difference between .map() and .flatMap()
    *
    * @param sc
    */
  def testFlatMap2(sc: SparkContext): Unit = {
    val elements = sc.parallelize(List("Panda town", "Rome town", "io town", "test town"));

    val word_map = elements.map(x => x.split(" "));
    val word_flat_map = elements.flatMap(x => x.split(" "));

    /**
      * in word_map you will find 4 array every one of which is of 2 arrays
      *
      * something like this :
      *
      * array [
      *   0 : array [
      *           0: "Panda",
      *           1: "town"
      *           ],
      *  1 : array [
      *           0: "Rome",
      *           1: "town"
      *          ],
      *  2 : array [
      *           0: "io",
      *           1: "town"
      *          ],
      *  3 : array [
      *           0: "test",
      *           1: "town"
      *          ],
      * ]
      *
      */
    println("");
    println("************************ TRANSFORMATION FLATMAP");
    println("Actions : values.map(x => x.split(\" \"))");

    var i = 0;
    word_map.collect().foreach ((x: Array[String]) => println(x.mkString("[", ",", "]")));


    /**
      * the flatMap method flatten the arrays so the results will be on single array of the all elements
      * splitted by " "
      *
      * array [
      *   0 : "Panda",
      *   1 : "town",
      *   2 : "Rome",
      *   3 : "town",
      *   4 : "io",
      *   5 : "town",
      *   6 : "test",
      *   7 : "town"
      * ]
      */
    println("");
    println("************************ TRANSFORMATION FLATMAP");
    println("Actions : values.flatMap(x => x.split(\" \"))");
    println(word_flat_map.collect().mkString("[", ",", "]"));
  }
}
